(function() {var type_impls = {
"hir_expand":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DeclarativeMacro%3CS%3E\" class=\"impl\"><a href=\"#impl-DeclarativeMacro%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; DeclarativeMacro&lt;S&gt;<div class=\"where\">where\n    S: Span,</div></h3></section></summary><div class=\"impl-items\"><section id=\"method.from_err\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">from_err</a>(err: ParseError, is_2021: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>) -&gt; DeclarativeMacro&lt;S&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_macro_rules\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">parse_macro_rules</a>(\n    tt: &amp;Subtree&lt;S&gt;,\n    is_2021: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,\n    new_meta_vars: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>\n) -&gt; DeclarativeMacro&lt;S&gt;</h4></section></summary><div class=\"docblock\"><p>The old, <code>macro_rules! m {}</code> flavor.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_macro2\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">parse_macro2</a>(\n    tt: &amp;Subtree&lt;S&gt;,\n    is_2021: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,\n    new_meta_vars: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>\n) -&gt; DeclarativeMacro&lt;S&gt;</h4></section></summary><div class=\"docblock\"><p>The new, unstable <code>macro m {}</code> flavor.</p>\n</div></details><section id=\"method.err\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">err</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;ParseError&gt;</h4></section><section id=\"method.expand\" class=\"method\"><h4 class=\"code-header\">pub fn <a class=\"fn\">expand</a>(\n    &amp;self,\n    tt: &amp;Subtree&lt;S&gt;,\n    marker: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;mut S</a>) + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    new_meta_vars: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a>,\n    call_site: S\n) -&gt; <a class=\"struct\" href=\"hir_expand/struct.ValueResult.html\" title=\"struct hir_expand::ValueResult\">ValueResult</a>&lt;Subtree&lt;S&gt;, ExpandError&gt;</h4></section></div></details>",0,"hir_expand::DeclarativeMacro"],["<section id=\"impl-StructuralPartialEq-for-DeclarativeMacro%3CS%3E\" class=\"impl\"><a href=\"#impl-StructuralPartialEq-for-DeclarativeMacro%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for DeclarativeMacro&lt;S&gt;</h3></section>","StructuralPartialEq","hir_expand::DeclarativeMacro"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-DeclarativeMacro%3CS%3E\" class=\"impl\"><a href=\"#impl-Clone-for-DeclarativeMacro%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for DeclarativeMacro&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; DeclarativeMacro&lt;S&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.76.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","hir_expand::DeclarativeMacro"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-DeclarativeMacro%3CS%3E\" class=\"impl\"><a href=\"#impl-Debug-for-DeclarativeMacro%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for DeclarativeMacro&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.76.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.76.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.76.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","hir_expand::DeclarativeMacro"],["<section id=\"impl-StructuralEq-for-DeclarativeMacro%3CS%3E\" class=\"impl\"><a href=\"#impl-StructuralEq-for-DeclarativeMacro%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for DeclarativeMacro&lt;S&gt;</h3></section>","StructuralEq","hir_expand::DeclarativeMacro"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-DeclarativeMacro%3CS%3E\" class=\"impl\"><a href=\"#impl-PartialEq-for-DeclarativeMacro%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for DeclarativeMacro&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;DeclarativeMacro&lt;S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.76.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.76.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","hir_expand::DeclarativeMacro"],["<section id=\"impl-Eq-for-DeclarativeMacro%3CS%3E\" class=\"impl\"><a href=\"#impl-Eq-for-DeclarativeMacro%3CS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for DeclarativeMacro&lt;S&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.76.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","hir_expand::DeclarativeMacro"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()